{ "prompt": "Create a webhooks object with properties as string and function which takes an event of AuthProps and returns a promise with void.", "result": { "fileName": "api.ts", "type": "export type IWebhooks = {\n  [prop: string]: (event: AuthProps) => Promise<void>;\n};" } }
{ "prompt": "Create an assist object with an ID, prompt, and promptResult as an array of strings.", "result": { "fileName": "assist.ts", "type": "export type IAssist = {\n  id: string;\n  prompt: string;\n  promptResult: string[];\n};" } }
{ "prompt": "Create a transcript message object with words, duration, timestamp, and username.", "result": { "fileName": "booking_transcript.ts", "type": "export type ITranscriptMessage = {\n  words: string;\n  duration: number;\n  timestamp: string;\n  username: string;\n};" } }
{ "prompt": "Create a booking transcript object with a username and an array of transcript messages.", "result": { "fileName": "booking_transcript.ts", "type": "export type IBookingTranscript = {\n  username: string;\n  messages: ITranscriptMessage[];\n};" } }
{ "prompt": "Create a booking object that extends IQuote with quoteId, quoteSub, and an array of booking transcripts.", "result": { "fileName": "booking.ts", "type": "export type IBooking = IQuote & {\n  quoteId: string;\n  quoteSub: string;\n  transcripts: IBookingTranscript[];\n};" } }
{ "prompt": "Create a contact object with an ID, name, email, and phone.", "result": { "fileName": "contact.ts", "type": "export type IContact = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n};" } }
{ "prompt": "Create an exchange object with a booking of type IBooking.", "result": { "fileName": "exchange.ts", "type": "export type IExchange = {\n  booking: IBooking;  \n};" } }
{ "prompt": "Create a feedback object with an ID, message, group name, createdOn, and username.", "result": { "fileName": "feedback.ts", "type": "export type IFeedback = {\r\n  id: string;\r\n  message: string;\r\n  groupName: string;\r\n  createdOn: string;\r\n  username: string;\r\n};" } }
{ "prompt": "Create a file type object with an ID and name.", "result": { "fileName": "file.ts", "type": "export type IFileType = {\n  id: string;\n  name: string;\n};" } }
{ "prompt": "Create a file object with an ID, fileTypeId, fileTypeName, name, and location.", "result": { "fileName": "file.ts", "type": "export type IFile = {\n  id: string;\n  fileTypeId: string;\n  fileTypeName: string;\n  name: string;\n  location: string;\n};" } }
{ "prompt": "Create a form field with an optional ID, label, value, helper text, type, default value, and a required flag.","result": { "fileName": "form.ts","type": "export type IField = Record<string, string | boolean> & {\n i?: string; // id\n l: string; // label\n v?: string; // value\n h?: string; // helperText\n t?: string; // type\n d?: string; // defaultValue\n r?: boolean; // required\n};" } }
{ "prompt": "Create a form template containing fields.","result": { "fileName": "form.ts","type": "export type IFormTemplate = Record<string, IField[]>;" } }
{ "prompt": "Create a form submission containing submitted field values.","result": { "fileName": "form.ts","type": "export type IFormSubmission = Record<string, string[]>;" } }
{ "prompt": "Create a form version submission with an optional ID, form version ID, and submission data.","result": { "fileName": "form.ts","type": "export type IFormVersionSubmission = {\n id?: string;\n formVersionId: string;\n submission: IFormSubmission;\n}" } }
{ "prompt": "Create a form version with an ID, form ID, form template, submission data, creation date, and creator's user ID.","result": { "fileName": "form.ts","type": "export type IFormVersion = {\n id: string;\n formId: string;\n form: IFormTemplate;\n submission: IFormSubmission;\n createdOn: string;\n createdSub: string;\n}" } }
{ "prompt": "Create a form with an ID, name, version, creation date, and creator's user ID.","result": { "fileName": "form.ts","type": "export type IForm = {\n id: string;\n name: string;\n version: IFormVersion;\n createdOn: string;\n createdSub: string;\n}" } }
{ "prompt": "Create a group form which includes a form, group ID, form ID, and group name.","result": { "fileName": "group_form.ts","type": "export type IGroupForm = IForm & {\n id: string;\n groupId: string;\n formId: string;\n groupName: string;\n};" } }
{ "prompt": "Create a record of group forms with their IDs as keys.","result": { "fileName": "group_form.ts","type": "export type IGroupForms = Record<string, IGroupForm>;" } }
{ "prompt": "Create a group role with role details, group ID, role ID, and external ID.","result": { "fileName": "group_role.ts","type": "export type IGroupRole = IRole & {\n groupId: string;\n roleId: string;\n externalId: string;\n}" } }
{ "prompt": "Create a record of group roles with their IDs as keys.","result": { "fileName": "group_role.ts","type": "export type IGroupRoles = Record<string, IGroupRole>;" } }