export type IWebhooks = {
  [prop: string]: (event: AuthProps) => Promise<void>;
};
export type IAssist = {
  id: string;
  prompt: string;
  promptResult: string[];
};
export type ITranscriptMessage = {
  words: string;
  duration: number;
  timestamp: string;
  username: string;
}
export type IBookingTranscript = {
  username: string;
  messages: ITranscriptMessage[];
}
export type IBooking = IQuote & {
  quoteId: string;
  quoteSub: string;
  transcripts: IBookingTranscript[];
};
export type IContact = {
  id: string;
  name: string;
  email: string;
  phone: string;
};
export type IExchange = {
  booking: IBooking;  
};
export type IFeedback = {
  id: string;
  message: string;
  groupName: string;
  createdOn: string;
  username: string;
}
export type IFileType = {
  id: string;
  name: string;
}
export type IFile = {
  id: string;
  fileTypeId: string;
  fileTypeName: string;
  name: string;
  location: string;
}
export type IField = Record<string, string | boolean> & {
  i?: string; // id
  l: string; // label
  v?: string; // value
  h?: string; // helperText
  t?: string; // type
  d?: string; // defaultValue
  r?: boolean; // required
};
export type IFormTemplate = Record<string, IField[]>;
export type IFormSubmission = Record<string, string[]>;
export type IFormVersionSubmission = {
  id?: string;
  formVersionId: string;
  submission: IFormSubmission;
}
export type IFormVersion = {
  id: string;
  formId: string;
  form: IFormTemplate;
  submission: IFormSubmission;
  createdOn: string;
  createdSub: string;
}
export type IForm = {
  id: string;
  name: string;
  version: IFormVersion;
  createdOn: string;
  createdSub: string;
}
export type IGroupForm = IForm & {
  id: string;
  groupId: string;
  formId: string;
  groupName: string;
};
export type IGroupRole = IRole & {
  groupId: string;
  roleId: string;
  externalId: string;
}
export type IGroupScheduleDateSlots = {
  weekStart: string;
  startTime: string;
  startDate: string;
  scheduleBracketSlotId: string;
  hour: number;
  minute: number;
  time: dayjs.Dayjs;
}
export type IGroupSchedule = ISchedule & {
  master: true;
  groupId: string;
  scheduleId: string;
  groupName: string;
};
export type IGroupServiceAddon = IServiceAddon & {
  groupId: string;
};
export type IGroupService = IService & {
  groupId: string;
  groupName: string;
  serviceId: string;
  ids: string[];
};
export type IGroupUserScheduleStubReplacement = {
  username: string;
  slotDate: string;
  startTime: string;
  scheduleBracketSlotId: string;
  serviceTierId: string;
  groupName: string;
  quoteId: string;
}
export type IGroupUserScheduleStub = {
  groupScheduleId: string;
  userScheduleId: string;
  quoteId: string;
  slotDate: string;
  startTime: string;
  serviceName: string;
  tierName: string;
  replacement: IGroupUserScheduleStubReplacement;
}
export type IGroupUserSchedule = ISchedule & {
  id: string;
  groupScheduleId: string;
  userScheduleId: string;
  services: Record<string, IService>;
  groupName: string;
}
export type IGroupUser = IUserProfile & {
  groupId: string;
  userId: string;
  userSub: string;
  externalId: string;
  groupExternalId: string;
  roleId: string;
  roleName: string;
  groupName: string;
};
export type IGroupUsers = Record<string, IGroupUser>;
export type IGroupRoleAuthActions = {
  id?: string;
  fetch?: boolean;
  actions: {
    id?: string;
    name: string;
  }[];
}
export type IGroupRoleActionState = {
  assignments: Record<string, IGroupRoleAuthActions>;
};
export type IGroup = {
  id: string;
  externalId: string;
  createdSub: string;
  createdOn: string;
  defaultRoleId: string;
  allowedDomains: string;
  name: string;
  purpose: string;
  code: string;
  usersCount: number;
  roles: Record<string, IRole>;
  users: Record<string, IUserProfile>;
  availableGroupAssignments: Record<string, IGroupRoleAuthActions>;

  isValid: boolean;
  needCheckName: boolean;
  checkingName: boolean;
  checkedName: string;
  error: Error | string;
}
export type ILookup = {
  id: string;
  name: string;
}
export type IManageGroups = Record<string, IGroup>;
export type IManageRoles = Record<string, IRole>;
export type IPayment = {
  id: string;
  contactId: string;
  details: AnyRecord;
};
export type IUserProfile = {
  id: string;
  sub: string;
  email: string;
  username: string;
  firstName: string;
  lastName: string;
  image: string;
  createdOn: string;
  updatedOn: string;
  locked: boolean;
  quotes: Record<string, IQuote>;
  seenQuotes: boolean;
  bookings: Record<string, IBooking>;
  seenBookings: boolean;
  groups: Record<string, IGroup>;
  roles: Record<string, IRole>;
  availableUserGroupRoles: UserGroupRoles;
};
export type IQuote = {
  id: string;
  slotDate: string;
  startTime: string;
  username: string;
  serviceTierId: string;
  serviceTierName: string;
  serviceName: string;
  scheduleBracketSlotId: string;
  serviceFormVersionSubmissionId: string;
  tierFormVersionSubmissionId: string;
  serviceForm?: IFormVersionSubmission;
  tierForm?: IFormVersionSubmission;
  createdSub: string;
  createdOn: string;
};
export type IRole = {
  id: string;
  name: string;
  createdOn: string;
}
export type IScheduleBracketSlot = {
  id: string;
  scheduleBracketId: string;
  startTime: string;
}
export type IScheduleBracket = {
  id: string;
  automatic: boolean;
  scheduleId: string;
  duration: number;
  multiplier: string;
  services: Record<string, IService>;
  slots: Record<string, IScheduleBracketSlot>;
  quotes: Record<string, IQuote>;
  createdOn: string;
};
export type ISchedule = {
  id: string;
  name: string;
  startTime: string;
  endTime: string;
  timezone: string;
  scheduleTimeUnitId: string;
  scheduleTimeUnitName: ITimeUnitNames;
  bracketTimeUnitId: string;
  bracketTimeUnitName: ITimeUnitNames;
  slotTimeUnitId: string;
  slotTimeUnitName: ITimeUnitNames;
  slotDuration: number;
  brackets: Record<string, IScheduleBracket>;
  createdOn: string;
};
export type IServiceAddon = {
  id: string;
  name: string;
  order: number;
  createdOn: string;
};
export type IServiceTier = {
  id: string;
  serviceId: string;
  formId: string;
  name: string;
  multiplier: string;
  addons: Record<string, IServiceAddon>;
  order: number;
  createdOn: string;
};
export type IService = {
  id: string;
  name: string;
  cost: string;
  tiers: Record<string, IServiceTier>;
  formId: string;
  createdOn: string;
};
export type ITimeUnitNames = string | ('minute' | 'hour' | 'day' | 'week' | 'month' | 'year');
export type ITimeUnit = {
  id: string;
  name: ITimeUnitNames;
};
export type IUtil = {
  confirmAction(...props: ConfirmActionProps): void | Promise<void>;
  isConfirming: boolean;
  confirmEffect: string;
  confirmSideEffect?: {
    approvalAction: string;
    approvalEffect: string;
    rejectionAction: string;
    rejectionEffect: string;
  };
  isLoading: boolean;
  loadingMessage: string;
  error: Error;
  canSubmitAssignments: boolean;
  snackType: 'success' | 'info' | 'warning' | 'error';
  snackOn: string;
  snackRequestId: string;
  perPage: number;
  theme: 'light' | 'dark';
}
export type IUuidFiles = {
  id: string;
  parentUuid: string;
  fileId: string;
}
export type IUuidNotes = {
  id: string;
  parentUuid: string;
  note: string;
}