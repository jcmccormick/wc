#!/bin/sh
if ! command -v docker >/dev/null 2>&1; then
  echo "Please install docker."
fi

if ! command -v jq >/dev/null 2>&1; then
  echo "Please install jq."
fi

if [ ! -f ./.env ]; then

  echo "Generating .env file..."

  read -p "Enter SITE_NAME (ex. My Project): " SITE_NAME
  read -p "Enter PROJECT_PREFIX (ex. mp): " PROJECT_PREFIX

  cat << EOF > ./.env
SITE_NAME=$SITE_NAME
PROJECT_PREFIX=$PROJECT_PREFIX
WIZAPP_VERSION=${WIZAPP_VERSION:-"0.2.0-beta.2"}

SVC_HOST=$(hostname -I | awk '{print $1}')
APP_HOST=$(hostname -I | awk '{print $1}')
DB_HOST=$(hostname -I | awk '{print $1}')
CUST_APP_HOSTNAME=$(hostname)
CUST_LAND_HOSTNAME=$(hostname)

CA_PASS=capass

REDIS_PASS=redispass

PG_DB=${PROJECT_PREFIX}db
PG_USER=${PROJECT_PREFIX}postgres
PG_PASS=pgpass

API_COOKIE=apicookie

KC_ADMIN=${PROJECT_PREFIX}auth
KC_PASS=kcpass
KC_REALM=$PROJECT_PREFIX-realm
KC_CLIENT=$PROJECT_PREFIX-client
KC_API_CLIENT_ID=$PROJECT_PREFIX-api-client
KC_API_CLIENT_SECRET=$PROJECT_PREFIX-api-client-secret

SOCK_SECRET=socksecret

GRAYLOG_ROOT_PASSWORD_SHA2=$(echo -n "graylogpass" | sha256sum | cut -d " " -f1) # graylogpass
GRAYLOG_PASSWORD_SECRET=graylogpasswordsecret

EOF

fi

. ./.env

SERVER_DIR="./app/server"
KEYSTORE_LOC="$SERVER_DIR/KeyStore.jks"
PASS_LOC="$SERVER_DIR/server.pass"
CSR_LOC="$SERVER_DIR/server.csr"
CERT_LOC="$SERVER_DIR/server.crt"
CERT_KEY_LOC="$SERVER_DIR/server.key"
API_CERT_LOC="./api/server.crt"
API_KEY_LOC="./api/server.key"
SOCK_CERT_LOC="./sock/server.crt"
SOCK_KEY_LOC="./sock/server.key"
TURN_CERT_LOC="./turn/server.crt"
TURN_KEY_LOC="./turn/server.key"
ALIAS="${CUST_APP_HOSTNAME}"
DAYS="365"
CA_ALIAS="InternalCA"

if [ ! -f $KEYSTORE_LOC ]; then
  # Generate a keystore and self-signed certificate
  echo "Generating keystore and self-signed certificate..."
  keytool -genkeypair -alias $ALIAS -keyalg RSA -keystore $KEYSTORE_LOC -storetype PKCS12 -keysize 2048 -storepass $CA_PASS -keypass $CA_PASS -noprompt -dname "CN=${CUST_APP_HOSTNAME}" -ext "SAN:c=DNS:${CUST_APP_HOSTNAME},IP:127.0.0.1"

  # Create a Certificate Signing Request
  echo "Creating CSR..."
  keytool -certreq -keystore $KEYSTORE_LOC -alias $ALIAS -file $CSR_LOC -storepass $CA_PASS -keypass $CA_PASS

  # Create a self-signed Certificate Authority
  echo "Creating self-signed CA..."
  openssl req -new -x509 -keyout $CERT_KEY_LOC -out $CERT_LOC -days $DAYS -passout pass:$CA_PASS -subj "/O=wcapp/OU=dev/CN=${CUST_APP_HOSTNAME}"

  # Use decrypted key for API
  echo "Generating key for API..."
  echo $CA_PASS | openssl rsa -passin stdin -in $CERT_KEY_LOC -out $API_KEY_LOC
  cp $CERT_LOC $API_CERT_LOC

  cp $API_KEY_LOC $SOCK_KEY_LOC
  cp $CERT_LOC $SOCK_CERT_LOC

  cp $API_KEY_LOC $TURN_KEY_LOC
  cp $CERT_LOC $TURN_CERT_LOC

  # Sign the CSR with the CA
  echo "Signing CSR with CA..."
  openssl x509 -req -CA $CERT_LOC -CAkey $CERT_KEY_LOC -in $CSR_LOC -out "$CERT_LOC.signed" -days $DAYS -CAcreateserial -passin "pass:$CA_PASS"

  # Import the CA to the keystore
  echo "Importing CA to the keystore..."
  keytool -keystore $KEYSTORE_LOC -alias CARoot -import -file $CERT_LOC -noprompt -storepass $CA_PASS -keypass $CA_PASS

  # Import the signed certificate to the keystore
  echo "Importing signed certificate to the keystore..."
  keytool -keystore $KEYSTORE_LOC -alias $ALIAS -import -file "$CERT_LOC.signed" -noprompt -storepass $CA_PASS -keypass $CA_PASS

  echo $CA_PASS > $PASS_LOC

  echo "Finished keystore and certificate generation."
fi

CUST_APP_HOSTNAME=$CUST_APP_HOSTNAME envsubst < ./turn/turnserver.conf.template > ./turn/turnserver.conf

# docker compose down

docker volume rm sqlitedata
docker volume rm pg15store
docker volume rm graylogdata
docker volume rm redisdata
docker volume create sqlitedata
docker volume create pg15store
docker volume create graylogdata
docker volume create redisdata

docker compose up -d --build db

docker compose up -d --build auth

docker compose build

. ./bin/installauth.sh

docker compose up -d