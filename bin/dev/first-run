#!/bin/sh
if ! command -v docker >/dev/null 2>&1; then
  echo "Please install docker."
fi

if ! command -v jq >/dev/null 2>&1; then
  echo "Please install jq."
fi


if [ ! -f ./.env ]; then

  echo "Generating .env file..."

  read -p "Enter PROJECT_PREFIX (ex. mp): " PROJECT_PREFIX
  read -p "Enter SITE_NAME (ex. My Project): " SITE_NAME

  PROJECT_DIR=$(pwd)
  CERTS_DIR="$PROJECT_DIR/certs"

  cat << EOF > ./.env
SITE_NAME="$SITE_NAME"
PROJECT_PREFIX=$PROJECT_PREFIX
WIZAPP_VERSION=${WIZAPP_VERSION:-"0.2.0-beta.2"}

SVC_HOST=$(hostname -I | awk '{print $1}')
APP_HOST=$(hostname -I | awk '{print $1}')
DB_HOST=$(hostname -I | awk '{print $1}')
CUST_APP_HOSTNAME=$(hostname)
CUST_LAND_HOSTNAME=$(hostname)

CA_PASS=capass

REDIS_PASS=redispass

PG_DB=pgdblocal
PG_USER=postgres
PG_PASS=pgpass

API_COOKIE=apicookie

KC_ADMIN=kcauth
KC_PASS=kcpass
KC_REALM=kc_realm
KC_CLIENT=kc_client
KC_API_CLIENT_ID=kc_api_client
KC_API_CLIENT_SECRET=kc_api_client_secret

SOCK_SECRET=socksecret

GRAYLOG_ROOT_PASSWORD_SHA2=$(echo -n "graylogpass" | sha256sum | cut -d " " -f1)
GRAYLOG_PASSWORD_SECRET=graylogpasswordsecret

PROJECT_DIR=$PROJECT_DIR
CERTS_DIR=$CERTS_DIR

KEYSTORE_LOC="$CERTS_DIR/KeyStore.jks"

PASS_LOC="$CERTS_DIR/server.pass"

EXIT_FULLCHAIN_LOC="$CERTS_DIR/exit_fullchain.pem"
EXIT_KEY_LOC="$CERTS_DIR/exit_privkey.pem"

CA_CERT_LOC="$CERTS_DIR/ca.crt"

DB_FULLCHAIN_LOC="$CERTS_DIR/db_fullchain.pem"
DB_KEY_LOC="$CERTS_DIR/db_host.key"

KC_FULLCHAIN_LOC="$CERTS_DIR/keycloak_fullchain.pem"
KC_KEY_LOC="$CERTS_DIR/keycloak.key"

CSR_LOC="$CERTS_DIR/server.csr"

ALIAS=$(hostname)
CA_ALIAS="CARoot"
DAYS="365"

EOF

fi

. ./.env

if [ ! -f $KEYSTORE_LOC ]; then

  mkdir -p $CERTS_DIR

  # Generate a keystore and self-signed certificate
  echo "Generating keystore and self-signed certificate..."
  keytool -genkeypair -alias $ALIAS -keyalg RSA -keystore $KEYSTORE_LOC -storetype PKCS12 -keysize 2048 -storepass $CA_PASS -keypass $CA_PASS -noprompt -dname "CN=$CUST_APP_HOSTNAME" -ext "SAN:c=DNS:$CUST_APP_HOSTNAME,IP:127.0.0.1"

  # Create a Certificate Signing Request
  echo "Creating CSR..."
  keytool -certreq -keystore $KEYSTORE_LOC -alias $ALIAS -file $CSR_LOC -storepass $CA_PASS -keypass $CA_PASS

  # Create a self-signed Certificate Authority
  echo "Creating self-signed CA..."
  openssl req -nodes -new -x509 -keyout $EXIT_KEY_LOC -out $EXIT_FULLCHAIN_LOC -days 365 -subj "/CN=$CUST_APP_HOSTNAME"

  # Use decrypted key for API
  echo "Generating key for API..."
  cp $EXIT_FULLCHAIN_LOC $DB_FULLCHAIN_LOC
  cp $EXIT_KEY_LOC $DB_KEY_LOC

  cp $EXIT_FULLCHAIN_LOC $KC_FULLCHAIN_LOC
  cp $EXIT_KEY_LOC $KC_KEY_LOC

  cp $EXIT_FULLCHAIN_LOC $CA_CERT_LOC

  # Sign the CSR with the CA
  echo "Signing CSR with CA..."
  openssl x509 -req -CA $EXIT_FULLCHAIN_LOC -CAkey $EXIT_KEY_LOC -in $CSR_LOC -out "$EXIT_FULLCHAIN_LOC.signed" -days $DAYS -CAcreateserial -passin "pass:$CA_PASS"

  # Import the CA to the keystore
  echo "Importing CA to the keystore..."
  keytool -keystore $KEYSTORE_LOC -alias $CA_ALIAS -import -file $EXIT_FULLCHAIN_LOC -noprompt -storepass $CA_PASS -keypass $CA_PASS

  # Import the signed certificate to the keystore
  echo "Importing signed certificate to the keystore..."
  keytool -keystore $KEYSTORE_LOC -alias $ALIAS -import -file "$EXIT_FULLCHAIN_LOC.signed" -noprompt -storepass $CA_PASS -keypass $CA_PASS

  echo $CA_PASS > $PASS_LOC

  echo "Finished keystore and certificate generation."
fi

CUST_APP_HOSTNAME=$CUST_APP_HOSTNAME envsubst < ./turn/turnserver.conf.template > ./turn/turnserver.conf

docker stop $(docker ps -aq)
docker rm $(docker ps -aq)

docker volume rm sqlitedata
docker volume rm pg15store
docker volume rm graylogdata
docker volume rm redisdata
docker volume create sqlitedata
docker volume create pg15store
docker volume create graylogdata
docker volume create redisdata

docker compose up -d --build db

docker compose up -d --build auth

docker compose build

. ./bin/install/auth

docker compose up -d