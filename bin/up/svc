#!/bin/sh
. ./bin/util/genenv

echo "Configuring svc server..."
until ping -c1 $SVC_HOST; do sleep 5; done
until ssh-keyscan -H $SVC_HOST >> ~/.ssh/known_hosts; do sleep 5; done

SERVICES="sock turn graylog"
read -p "Service to deploy (Leave blank to deploy $SERVICES): " DEPLOYED_SERVICE
DEPLOYED_SERVICE=${DEPLOYED_SERVICE:-$SERVICES}

if echo $DEPLOYED_SERVICE | grep -q "sock"; then
  SOCK_VERSION=$(ssh -T $TAILSCALE_OPERATOR@$BUILD_HOST "sh /home/$TAILSCALE_OPERATOR/$PROJECT_PREFIX/bin/util/getversion -i sock")
fi

if echo $DEPLOYED_SERVICE | grep -q "turn"; then
  TURN_VERSION=$(ssh -T $TAILSCALE_OPERATOR@$BUILD_HOST "sh /home/$TAILSCALE_OPERATOR/$PROJECT_PREFIX/bin/util/getversion -i turn")
fi

ssh -T $TAILSCALE_OPERATOR@$BUILD_HOST << EOF
cd /home/$TAILSCALE_OPERATOR/$PROJECT_PREFIX

PWD=\$(pwd) . ./bin/util/gitpull

if echo $DEPLOYED_SERVICE | grep -q "sock"; then
  echo "# Building sock"
  sudo docker compose build sock
  sudo docker tag wcsock localhost:5000/wcsock:$SOCK_VERSION
  sudo docker tag wcsock localhost:5000/wcsock:latest
  sudo docker push localhost:5000/wcsock:$SOCK_VERSION
  sudo docker push localhost:5000/wcsock:latest
fi

if echo $DEPLOYED_SERVICE | grep -q "turn"; then
  echo "# Building turn"
  sudo docker compose build turn
  sudo docker tag wcturn localhost:5000/wcturn:$TURN_VERSION
  sudo docker tag wcturn localhost:5000/wcturn:latest
  sudo docker push localhost:5000/wcturn:$TURN_VERSION
  sudo docker push localhost:5000/wcturn:latest
fi
EOF

scp "./bin/util/getdocker" "./turn/turnserver.conf.template" "./deploy/graylog-content-pack.json" "$TAILSCALE_OPERATOR@$SVC_HOST:/home/$TAILSCALE_OPERATOR/"

ssh -T $TAILSCALE_OPERATOR@$SVC_HOST << EOF

BUILD_HOST=$BUILD_HOST . /home/$TAILSCALE_OPERATOR/getdocker

echo "# Allowing ports 8888 (sock), 9000 (graylog), 1514 (syslog), 12201 (gelf) on $SVC_HOST"
sudo ufw allow 8888
sudo ufw allow 9000
sudo ufw allow 1514
sudo ufw allow 1514/udp
sudo ufw allow 12201
sudo ufw allow 12201/udp

sudo ufw allow 3478/udp

if echo $DEPLOYED_SERVICE | grep -q "sock"; then
  echo "# Deploying sock"
  sudo docker stop wcsock
  sudo docker rm wcsock

  sudo docker run -d --restart always --name wcsock --network="host" \
    --add-host=$DB_HOST:$(tailscale ip -4 $DB_HOST) \
    --add-host=$CUST_APP_HOSTNAME:$(tailscale ip -4 $APP_HOST) \
    -e API_HOST=${DB_HOST}:9443/api \
    -e SOCK_SECRET=${SOCK_SECRET} \
    -e REDIS_HOST=${DB_HOST} \
    -e REDIS_PASS=${REDIS_PASS} \
    -e NODE_TLS_REJECT_UNAUTHORIZED=0 \
    -e CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME} \
    -e KC_REALM=${KC_REALM} $BUILD_HOST:5000/wcsock:$SOCK_VERSION
fi

if echo $DEPLOYED_SERVICE | grep -q "turn"; then
  echo "# Deploying turn"
  sudo docker stop wcturn
  sudo docker rm wcturn

  CUST_APP_HOSTNAME=$CUST_APP_HOSTNAME TURN_NAME=$TURN_NAME TURN_PASS=$TURN_PASS envsubst < /home/$TAILSCALE_OPERATOR/turnserver.conf.template > /home/$TAILSCALE_OPERATOR/turnserver.conf

  sudo docker run -d --restart always --name wcturn --network="host" \
    -v /home/$TAILSCALE_OPERATOR/turnserver.conf:/etc/coturn/turnserver.conf:ro \
    $BUILD_HOST:5000/wcturn:$TURN_VERSION
fi

if echo $DEPLOYED_SERVICE | grep -q "graylog"; then
  echo "# Deploying graylog"
  sudo docker stop mongo
  sudo docker stop elasticsearch
  sudo docker stop graylog

  sudo docker rm mongo
  sudo docker rm elasticsearch
  sudo docker rm graylog

  sudo docker volume rm graylogdata
  sudo docker network rm graylognet

  sudo docker volume create graylogdata
  sudo docker network create graylognet

  sudo docker run -d --restart always --network="graylognet" --name=mongo mongo:5.0.13

  sudo docker run -d --restart always --network="graylognet" --name=elasticsearch -e http.host=0.0.0.0 \
    -e transport.host=localhost \
    -e network.host=0.0.0.0 \
    -e "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m" \
    docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2

  sudo docker run -d --restart always --network="graylognet" --name graylog \
    -p 9000:9000 \
    -p 1514:1514 \
    -p 1514:1514/udp \
    -p 12201:12201 \
    -p 12201:12201/udp \
    -e GRAYLOG_CONTENT_PACKS_AUTO_INSTALL=graylog-content-pack.json \
    -e GRAYLOG_CONTENT_PACKS_LOADER_ENABLED=true \
    -e GRAYLOG_CONTENT_PACKS_DIR=data/contentpacks \
    -e GRAYLOG_PASSWORD_SECRET=$GRAYLOG_PASSWORD_SECRET \
    -e GRAYLOG_ROOT_PASSWORD_SHA2=$GRAYLOG_ROOT_PASSWORD_SHA2 \
    -e GRAYLOG_HTTP_EXTERNAL_URI=http://$SVC_HOST:9000/ \
    -v /home/$TAILSCALE_OPERATOR/graylog-content-pack.json:/usr/share/graylog/data/contentpacks/graylog-content-pack.json \
    -v graylogdata:/usr/share/graylog/data graylog/graylog:5.0
fi
EOF