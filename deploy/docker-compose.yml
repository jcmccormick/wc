version: '3.9'
services:
  app:
    image: wcapp # 80 443 typescript cra react project hosted on nginx
    build:
      context: ./
      dockerfile: ./app/Dockerfile
      args:
        - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
        - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
        - SITE_NAME=${SITE_NAME}
        - KC_REALM=${KC_REALM}
        - KC_CLIENT=${KC_CLIENT}
        - KC_PATH=/auth
        - CA_PASS=${CA_PASS}
    environment:
      - SVC_HOST=${SVC_HOST}
      - APP_HOST=${APP_HOST}
      - DB_HOST=${DB_HOST}
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
      - KC_REALM=${KC_REALM}
      - KC_CLIENT=${KC_CLIENT}
      - KC_PATH=/auth

  api: # 9443 express passport for keycloak auth
    image: wcapi
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    extra_hosts:
      - ${CUST_APP_HOSTNAME}:${APP_HOST}
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_COOKIE=${API_COOKIE}
      - KC_REALM=${KC_REALM}
      - KC_CLIENT=${KC_CLIENT}
      - KC_API_CLIENT_ID=${KC_API_CLIENT_ID}
      - KC_API_CLIENT_SECRET=${KC_API_CLIENT_SECRET}
      - DB_URL=jdbc:postgresql://${PG_USER}:${PG_PASS}@${DB_HOST}:5432/${PG_DB} #NONSECRET
      - APP_HOST=${APP_HOST}
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_HOST=${APP_HOST}
      - KC_PORT=8080
      - FS_HOST=${DB_HOST}
      - FS_PORT=8000
      - PG_HOST=${DB_HOST} #NONSECRET
      - PG_PORT=5432 #NONSECRET
      - PG_USER=${PG_USER} #SECRET
      - PG_PASSWORD=${PG_PASS} #SECRET
      - PG_DATABASE=${PG_DB} #SECRET
      - GRAYLOG_HOST=${SVC_HOST}
      - GRAYLOG_PORT=12201
      - SOCK_HOST=${SVC_HOST}
      - SOCK_PORT=8888
      - SOCK_SECRET=${SOCK_SECRET}
      - REDIS_HOST=${DB_HOST}
      - REDIS_PORT=6379
      - REDIS_PASS=${REDIS_PASS}
      - NODE_TLS_REJECT_UNAUTHORIZED=0 #NONSECRET # Remove when having cert - otherwise keycloak blocks redirects

  db: # 5432 postgres
    image: wcdb
    build:
      context: ./
      dockerfile: ./db/Dockerfile
    environment:
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS} #SECRET
    volumes: 
      - pg15store:/var/lib/postgresql/data

  redis: # 6379
    image: bitnami/redis:7.0
    environment:
      - REDIS_PASSWORD=${REDIS_PASS}
    volumes:
      - redisdata:/bitnami/redis/data

  fs: # 8000
    image: wcfs
    build:
      context: ./
      dockerfile: ./fs/Dockerfile
    environment:
      - SQLITE_DATA=/app/data/sqlite-db.db
    volumes:
      - sqlitedata:/app/data

  auth: # 8443 keycloak
    image: wcauth
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    environment:
      - KC_API_CLIENT_ID=${KC_API_CLIENT_ID}
      - API_HOST=${CUST_APP_HOSTNAME}/api
      - KC_HTTPS_KEY_STORE_FILE=/opt/keycloak/conf/KeyStore.jks
      - KC_HTTPS_KEY_STORE_PASSWORD=${CA_PASS}
      - KC_SPI_TRUSTSTORE_FILE_FILE=/opt/keycloak/conf/KeyStore.jks
      - KC_SPI_TRUSTSTORE_FILE_PASSWORD=${CA_PASS}
      - KC_SPI_TRUSTSTORE_FILE_HOSTNAME_VERIFICATION_POLICY=ANY
      - KC_HOSTNAME_ADMIN_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_HOSTNAME_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_PROXY=edge #NONSECRET
      - KC_HOSTNAME_STRICT_BACKCHANNEL=true #NONSECRET
      - KEYCLOAK_ADMIN=${KC_ADMIN} #SECRET
      - KEYCLOAK_ADMIN_PASSWORD=${KC_PASS} #SECRET
      - KC_DB_URL=jdbc:postgresql://${DB_HOST}:5432/${PG_DB} #NONSECRET
      - KC_DB_USERNAME=${PG_USER} #SECRET
      - KC_DB_PASSWORD=${PG_PASS} #SECRET
      - KC_REDIS_HOST=${APP_HOST}
      - KC_REDIS_PORT=6379
      - KC_REDIS_PASS=${REDIS_PASS}
      - KC_REGISTRATION_RATE_LIMIT=10

  sock: # 8888 websocket server
    image: wcsock
    build: ./sock
    environment:
      - API_HOST=${CUST_APP_HOSTNAME}/api
      - SOCK_SECRET=${SOCK_SECRET}
      - REDIS_HOST=${APP_HOST}
      - REDIS_PASS=${REDIS_PASS}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_REALM=${KC_REALM}

  turn: # STUN/TURN server for WebRTC
    image: wcturn
    build:
      context: ./
      dockerfile: ./turn/Dockerfile
    restart: always
    volumes:
      - ./turn/turnserver.conf:/etc/coturn/turnserver.conf:ro

  ## Graylog
  # MongoDB: https://hub.docker.com/_/mongo/
  mongo:
    image: mongo:5.0.13
    
  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/7.10/docker.html
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
          
  # Graylog: https://hub.docker.com/r/graylog/graylog/
  graylog:
    image: graylog/graylog:5.0
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    ports:
      # Graylog web interface and REST API
      - 9090:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
    volumes: # DONE
      - graylogdata:/usr/share/graylog/data
      - ./deploy/graylog-content-pack.json:/usr/share/graylog/data/contentpacks/graylog-content-pack.json

volumes:
  sqlitedata:
  pg15store:
  graylogdata:
  redisdata: