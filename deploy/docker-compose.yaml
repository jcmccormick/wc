version: '3.9'
services:
  app:
    image: wcapp # typescript cra react project hosted on nginx
    build:
      context: ./
      dockerfile: ./app/Dockerfile
      args:
        - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
        - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
        - CUST_HOST_IP=${CUST_HOST_IP}
        - SITE_NAME=${SITE_NAME}
    ports:
      - 80:80
      - 443:443
    environment:
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
      - CUST_HOST_IP=${CUST_HOST_IP}
      - KC_REALM=${KC_REALM}
      - KC_CLIENT=${KC_CLIENT}
      - KC_PATH=/auth
    depends_on:
      - api

  api: # express passport for keycloak auth
    image: wcapi
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    extra_hosts:
      - ${CUST_APP_HOSTNAME}:${APP_HOST}
    ports:
      - 8083:9443
    environment:
      - API_COOKIE=${API_COOKIE}
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_REALM=${KC_REALM}
      - KC_CLIENT=${KC_CLIENT}
      - KC_API_CLIENT_ID=${KC_API_CLIENT_ID}
      - KC_API_CLIENT_SECRET=${KC_API_CLIENT_SECRET}
      - DB_URL=jdbc:postgresql://${PG_USER}:${PG_PASS}@${DB_HOST}:8082/${PG_DB} #NONSECRET
      - PG_HOST=${DB_HOST} #NONSECRET
      - PG_PORT=8082 #NONSECRET
      - PG_USER=${PG_USER} #SECRET
      - PG_PASSWORD=${PG_PASS} #SECRET
      - PG_DATABASE=${PG_DB} #SECRET
      - GRAYLOG_HOST=${SVC_HOST}
      - GRAYLOG_PORT=12201
      - SOCK_HOST=${SVC_HOST}
      - SOCK_PORT=8081
      - SOCK_SECRET=${SOCK_SECRET}
      - KEYCLOAK_HOST=${APP_HOST}
      - KEYCLOAK_PORT=8443
      - REDIS_HOST=${APP_HOST}
      - REDIS_PORT=6379
      - REDIS_PASS=${REDIS_PASS}
      - NODE_TLS_REJECT_UNAUTHORIZED=0 #NONSECRET # Remove when having cert - otherwise keycloak blocks redirects

  db: # postgres
    image: postgres:15.0
    ports:
      - 8082:5432
    environment:
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS} #SECRET
    volumes: 
      - ./db/scripts:/docker-entrypoint-initdb.d
      - pg15store:/var/lib/postgresql/data

  redis:
    image: bitnami/redis:7.0
    environment:
      - REDIS_PASSWORD=${REDIS_PASS}
    volumes:
      - redisdata:/bitnami/redis/data
  fs: 
    image: wcfs
    build:
      context: ./fs
      dockerfile: ./Dockerfile
    environment:
      - SQLITE_DATA=/app/data/sqlite-db.db
    volumes:
      - sqlitedata:/app/data

  auth: # keycloak
    image: wcauth
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    ports:
      - 8443:8443
    environment:
      - KC_API_CLIENT_ID=${KC_API_CLIENT_ID}
      - APP_HOST=${APP_HOST}/api
      - KC_SPI_TRUSTSTORE_FILE_FILE=/opt/keycloak/conf/KeyStore.jks
      - KC_SPI_TRUSTSTORE_FILE_PASSWORD=${KC_PASS}
      - KC_SPI_TRUSTSTORE_FILE_HOSTNAME_VERIFICATION_POLICY=ANY
      - KC_HOSTNAME_ADMIN_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_HOSTNAME_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_PROXY=edge #NONSECRET
      - KC_HOSTNAME_STRICT_BACKCHANNEL=true #NONSECRET
      - KEYCLOAK_ADMIN=${KC_ADMIN} #SECRET
      - KEYCLOAK_ADMIN_PASSWORD=${KC_PASS} #SECRET
      - KC_DB_URL=jdbc:postgresql://${DB_HOST}:8082/${PG_DB} #NONSECRET
      - KC_DB_USERNAME=${PG_USER} #SECRET
      - KC_DB_PASSWORD=${PG_PASS} #SECRET
      - KC_REDIS_HOST=${APP_HOST}
      - KC_REDIS_PORT=6379
      - KC_REDIS_USER=${REDIS_USER}
      - KC_REDIS_PASS=${REDIS_PASS}
      - KC_REGISTRATION_RATE_LIMIT=10

  sock: # websocket server
    image: wcsock
    build: ./sock
    ports:
      - 8081:8080
    environment:
      - APP_HOST=${APP_HOST}/api
      - SOCK_SECRET=${SOCK_SECRET}
      - REDIS_HOST=${APP_HOST}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_REALM=${KC_REALM}

  turn: # STUN/TURN server for WebRTC
    image: wcturn
    build: ./turn
    restart: always
    environment:
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}

  ## Graylog
  # MongoDB: https://hub.docker.com/_/mongo/
  mongo:
    image: mongo:5.0.13
    
  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/7.10/docker.html
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    environment:
      - http.host=0.0.0.0 #NONSECRET
      - transport.host=localhost #NONSECRET
      - network.host=0.0.0.0 #NONSECRET
      - "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m" #NONSECRET
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
          
  # Graylog: https://hub.docker.com/r/graylog/graylog/
  graylog:
    image: graylog/graylog:5.0
    environment:
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET} #SECRET
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2} #SECRET
      - GRAYLOG_HTTP_EXTERNAL_URI=http://${CUST_HOST_IP}:9000/ #NONSECRET
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    restart: always
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - 9090:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
    volumes: # DONE
      - graylogdata:/usr/share/graylog/data