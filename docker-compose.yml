# stop nginx on host

# DOCKER_BUILDKIT=1 docker-compose up -d --build
# docker-compose logs -f -t
# docker-compose top

# docker run -it d340e8bb50f1 /bin/sh

version: '3.9'
services:
  app:
    image: wcapp # typescript cra react project hosted on nginx
    build:
      context: ./
      dockerfile: ./app/Dockerfile
      args:
        - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
        - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
        - CUST_HOST_IP=${CUST_HOST_IP}
        - SITE_NAME=${SITE_NAME}
    ports:
      - 443:443
      - 80:80
    environment:
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
      - CUST_HOST_IP=${CUST_HOST_IP}
      - KC_REALM=devel
      - KC_CLIENT=devel-client
      - KC_PATH=/auth
  auth: # keycloak
    image: wcauth
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    ports:
      - 9001:9000
      - 8443:8443
    environment:
      - KC_SPI_TRUSTSTORE_FILE_FILE=/opt/keycloak/conf/KeyStore.jks
      - KC_SPI_TRUSTSTORE_FILE_PASSWORD=123456
      - KC_SPI_TRUSTSTORE_FILE_HOSTNAME_VERIFICATION_POLICY=ANY
      - KC_HOSTNAME_ADMIN_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_HOSTNAME_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_PROXY=edge #NONSECRET
      - KC_HOSTNAME_STRICT_BACKCHANNEL=true #NONSECRET
      - KEYCLOAK_ADMIN=admin #SECRET
      - KEYCLOAK_ADMIN_PASSWORD=kcpass #SECRET
      - KC_DB_URL=jdbc:postgresql://${CUST_HOST_IP}:8082/sysmaindb #NONSECRET
      - KC_DB_USERNAME=postgres #SECRET
      - KC_DB_PASSWORD=postgres #SECRET
    depends_on:
      - db
  sock: # websocket server
    image: wcsock
    build: ./sock
    ports:
      - 8081:8080
    environment:
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_REALM=devel
  db: # postgres
    image: wcdb
    ports:
      - 8082:5432
    environment:
      - POSTGRES_PASSWORD=postgres #SECRET
    volumes:
      - pgdata:/var/lib/postgresql/data
  api: # express passport for keycloak auth
    image: wcapi
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    ports:
      - 8083:9443
    environment:
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_REALM=devel
      - KC_CLIENT=devel-client
      - KC_API_CLIENT_ID=api-client
      - KC_API_CLIENT_SECRET=Px1s9VDXfs8cECKynUMSfL6oc4RtK3Cg
      - PG_HOST=${CUST_HOST_IP} #NONSECRET
      - PG_PORT=8082 #NONSECRET
      - PG_USER=postgres #SECRET
      - PG_PASSWORD=postgres #SECRET
      - PG_DATABASE=sysmaindb #SECRET
      - GRAYLOG_HOST=${CUST_HOST_IP}
      - GRAYLOG_PORT=12201
      - SOCK_HOST=${CUST_HOST_IP}
      - SOCK_PORT=8081
      - NODE_TLS_REJECT_UNAUTHORIZED=0 #NONSECRET # Remove when having cert - otherwise keycloak blocks redirects
    depends_on:
      - db
  turn: # STUN/TURN server for WebRTC
    image: wcturn
    network_mode: host
    build:
      context: ./turn
    restart: always
    environment:
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
  
  ## Graylog
  
  # MongoDB: https://hub.docker.com/_/mongo/
  mongo:
    image: mongo:5.0.13
    networks:
      - graylog
    
  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/7.10/docker.html
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    environment:
      - http.host=0.0.0.0 #NONSECRET
      - transport.host=localhost #NONSECRET
      - network.host=0.0.0.0 #NONSECRET
      - "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m" #NONSECRET
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
    networks:
      - graylog

  # Graylog: https://hub.docker.com/r/graylog/graylog/
  graylog:
    image: graylog/graylog:5.0
    environment:
      # CHANGE ME (must be at least 16 characters)!
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper #SECRET
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 #SECRET
      - GRAYLOG_HTTP_EXTERNAL_URI=http://${CUST_HOST_IP}:9000/ #NONSECRET
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    networks:
      - graylog
    restart: always
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - 9000:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
    volumes: # DONE
      - graylogdata:/usr/share/graylog/data

volumes:
  pgdata:
    external: true
  graylogdata:
    external: true

networks:
  graylog:
    driver: bridge
