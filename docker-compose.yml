# stop nginx on host

# DOCKER_BUILDKIT=1 docker-compose up -d --build
# docker-compose logs -f -t
# docker-compose top
# docker logs -f -t $(docker ps -aqf "name=auth")

# docker run -it d340e8bb50f1 /bin/sh
# redis-cli --scan --pattern '*happiness*' | xargs -I {} redis-cli del {}

version: '3.9'
services:
  app:
    image: wcapp # 80 443 typescript cra react project hosted on nginx
    build:
      context: ./
      dockerfile: ./app/Dockerfile
      args:
        - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
        - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
        - SITE_NAME=${SITE_NAME}
        - KC_REALM=${KC_REALM}
        - KC_CLIENT=${KC_CLIENT}
        - KC_PATH=/auth
        - CA_PASS=${CA_PASS}
    ports:
      - 80:80
      - 443:443
    environment:
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - CUST_LAND_HOSTNAME=${CUST_LAND_HOSTNAME}
      - KC_REALM=${KC_REALM}
      - KC_CLIENT=${KC_CLIENT}
      - KC_PATH=/auth
      - APP_HOST=${APP_HOST}
    depends_on:
      - api
      - sock
      - auth

  api: # 9443 express passport for keycloak auth
    image: wcapi
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    ports:
      - 9443:9443
    extra_hosts:
      - ${CUST_APP_HOSTNAME}:${APP_HOST}
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_COOKIE=${API_COOKIE}
      - KC_REALM=${KC_REALM}
      - KC_CLIENT=${KC_CLIENT}
      - KC_API_CLIENT_ID=${KC_API_CLIENT_ID}
      - KC_API_CLIENT_SECRET=${KC_API_CLIENT_SECRET}
      - DB_URL=jdbc:postgresql://${PG_USER}:${PG_PASS}@db:5432/${PG_DB} #NONSECRET
      - APP_HOST=${APP_HOST}
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_HOST=auth
      - KC_PORT=8443
      - FS_HOST=fs
      - FS_PORT=8000
      - PG_HOST=db #NONSECRET
      - PG_PORT=5432 #NONSECRET
      - PG_USER=${PG_USER} #SECRET
      - PG_PASSWORD=${PG_PASS} #SECRET
      - PG_DATABASE=${PG_DB} #SECRET
      - GRAYLOG_HOST=graylog
      - GRAYLOG_PORT=12201
      - SOCK_HOST=sock
      - SOCK_PORT=8888
      - SOCK_SECRET=${SOCK_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASS=${REDIS_PASS}
      - NODE_TLS_REJECT_UNAUTHORIZED=0 #NONSECRET # Remove when having cert - otherwise keycloak blocks redirects
    depends_on:
      - db
      - auth
      - redis
      - sock

  db: # 5432 postgres
    image: wcdb
    build:
      context: ./
      dockerfile: ./db/Dockerfile
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS} #SECRET
    volumes: 
      - ./db/scripts:/docker-entrypoint-initdb.d
      - pg15store:/var/lib/postgresql/data

  redis: # 6379
    image: 'bitnami/redis:7.0'
    ports:
      - 6379:6379
    environment:
      - REDIS_PASSWORD=${REDIS_PASS}
    volumes:
      - redisdata:/bitnami/redis/data

  # docker run --rm --name curl-container --net site alpine sh -c "apk add --no-cache curl"
  # INJECTION: docker exec curl-container /usr/bin/curl -H 'Content-Type: text/plain' -H 'Content-Disposition: attachment; filename="; DROP TABLE files;"' -H 'Expires-At: 2099-12-31 23:59:59' -d 'expiration test' http://172.20.0.16:8000/file
  # FOREVER: docker exec curl-container /usr/bin/curl -H 'Content-Type: text/plain' -H 'Content-Disposition: attachment; filename="forever_file.txt"' -H 'Expires-At: 2099-12-31 23:59:59' -d 'expiration test' http://172.20.0.16:8000/file
  # EXPIRE_FOREVER: docker exec curl-container /usr/bin/curl -X PUT -H 'Expires-At: 2000-12-31 00:00:00' http://172.20.0.16:8000/file/5baa7d25-884d-436c-b12d-e1c0a2520560
  # EXPIRED: docker exec curl-container /usr/bin/curl -H 'Content-Type: text/plain' -H 'Content-Disposition: attachment; filename="erased_within_60.txt"' -H 'Expires-At: 2020-12-31 23:59:59' -d 'expiration 3f3f3f' http://172.20.0.16:8000/file
  # docker exec curl-container /usr/bin/curl http://172.20.0.16:8000/file/2e397ef5-2241-47b6-ba95-7ccd138b4654
  fs: # 8000
    image: wcfs
    ports:
      - 8000:8000
    build:
      context: ./
      dockerfile: ./fs/Dockerfile
    environment:
      - SQLITE_DATA=/app/data/sqlite-db.db
    volumes:
      # - ./fs/sh:/app
      - sqlitedata:/app/data

  auth: # 8443 keycloak
    image: wcauth
    ports:
      - 8080:8080
      - 8443:8443
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    environment:
      - KC_API_CLIENT_ID=${KC_API_CLIENT_ID}
      - APP_HOST=api:9443/api #pointing to reverse proxy or use =${DB_HOST}:9443/api for internal routing
      - KC_HTTPS_KEY_STORE_FILE=/opt/keycloak/conf/KeyStore.jks
      - KC_HTTPS_KEY_STORE_PASSWORD=${CA_PASS}
      - KC_SPI_TRUSTSTORE_FILE_FILE=/opt/keycloak/conf/KeyStore.jks
      - KC_SPI_TRUSTSTORE_FILE_PASSWORD=${CA_PASS}
      - KC_SPI_TRUSTSTORE_FILE_HOSTNAME_VERIFICATION_POLICY=ANY
      - KC_HOSTNAME_ADMIN_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_HOSTNAME_URL=https://${CUST_APP_HOSTNAME}/auth #NONSECRET
      - KC_PROXY=edge #NONSECRET
      - KC_HOSTNAME_STRICT_BACKCHANNEL=true #NONSECRET
      - KEYCLOAK_ADMIN=${KC_ADMIN} #SECRET
      - KEYCLOAK_ADMIN_PASSWORD=${KC_PASS} #SECRET
      - KC_DB_URL=jdbc:postgresql://db:5432/${PG_DB} #NONSECRET
      - KC_DB_USERNAME=${PG_USER} #SECRET
      - KC_DB_PASSWORD=${PG_PASS} #SECRET
      - KC_REDIS_HOST=redis
      - KC_REDIS_PORT=6379
      - KC_REDIS_PASS=${REDIS_PASS}
      - KC_REGISTRATION_RATE_LIMIT=10
    depends_on:
      - db

  sock: # 8888 websocket server
    image: wcsock
    build: ./sock
    extra_hosts:
      - ${CUST_APP_HOSTNAME}:${APP_HOST}
    environment:
      - API_HOST=${CUST_APP_HOSTNAME}/api #pointing to reverse proxy or use =${DB_HOST}:9443/api for internal routing
      - SOCK_SECRET=${SOCK_SECRET}
      - REDIS_HOST=redis
      - REDIS_PASS=${REDIS_PASS}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CUST_APP_HOSTNAME=${CUST_APP_HOSTNAME}
      - KC_REALM=${KC_REALM}
    depends_on:
      - redis

  turn: # STUN/TURN server for WebRTC
    image: wcturn
    build:
      context: ./
      dockerfile: ./turn/Dockerfile
    restart: always
    volumes:
      - ./turn/turnserver.conf:/etc/coturn/turnserver.conf:ro

  ## Graylog
  # MongoDB: https://hub.docker.com/_/mongo/
  mongo:
    image: mongo:5.0.13
    
  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/7.10/docker.html
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    environment:
      - http.host=0.0.0.0 #NONSECRET
      - transport.host=localhost #NONSECRET
      - network.host=0.0.0.0 #NONSECRET
      - "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m" #NONSECRET
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
          
  # Graylog: https://hub.docker.com/r/graylog/graylog/
  graylog:
    image: graylog/graylog:5.0
    environment:
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET} #SECRET
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2} #SECRET
      - GRAYLOG_HTTP_EXTERNAL_URI=http://${SVC_HOST}:9000/ #NONSECRET
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    restart: always
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - 9090:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
    volumes: # DONE
      - graylogdata:/usr/share/graylog/data

  # mail:
  #   image: bytemark/smtp
  #   restart: always
  #   networks:
  #     site:
  #       ipv4_address: 172.20.0.13
  #       aliases:
  #         - mail

volumes:
  sqlitedata:
    external: true
  pg15store:
    external: true
  graylogdata:
    external: true
  redisdata:
    external: true